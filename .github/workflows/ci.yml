name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # 🧪 Testing and Linting
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run linting
      run: npm run lint || echo "Linting not configured yet"
      
    - name: 🧪 Run tests
      run: npm test || echo "Tests not configured yet"
      
    - name: 📊 Generate coverage report
      run: npm run coverage || echo "Coverage not configured yet"

  # 🏗️ Build Application
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: echo "No build step required - using vanilla JS"
      
    - name: 📤 Upload source files
      uses: actions/upload-artifact@v4
      with:
        name: source-files
        path: |
          *.js
          *.html
          *.json
          !node_modules
        retention-days: 30

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: 🔒 Security scan with Snyk
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # 🚀 Deploy to Staging (on develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download source files
      uses: actions/download-artifact@v4
      with:
        name: source-files
        path: .
        
    - name: 🚀 Deploy to Railway (Staging)
      id: deploy
      run: |
        echo "Deploying to Railway staging environment"
        echo "url=https://staging-solar-scan.railway.app" >> $GITHUB_OUTPUT
        # Add actual Railway deployment commands here

  # 🚀 Deploy to Production (on main branch)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download source files
      uses: actions/download-artifact@v4
      with:
        name: source-files
        path: .
        
    - name: 🚀 Deploy to Railway (Production)
      id: deploy
      run: |
        echo "Deploying to Railway production environment"
        echo "url=https://solar-scan.railway.app" >> $GITHUB_OUTPUT
        # Add actual Railway deployment commands here

  # 📊 Performance Testing
  lighthouse:
    name: 🔍 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging-solar-scan.railway.app
        configPath: './lighthouserc.json'
        uploadArtifacts: true

  # 📱 Browser Testing
  browser-test:
    name: 🌐 Browser Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        browser: [chrome, firefox, safari]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🌐 Test with ${{ matrix.browser }}
      run: |
        echo "Running browser tests with ${{ matrix.browser }}"
        # Add browser testing commands here

  # 📊 Code Quality
  code-quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📊 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🏷️ Auto Release (on main branch)
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Create Release
      uses: cycjimmy/semantic-release-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 📊 Notification
  notify:
    name: 📊 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: 📊 Send Slack notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Solar Scan deployment completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}